{"ast":null,"code":"var _jsxFileName = \"D:\\\\lab4\\\\client\\\\src\\\\components\\\\CatFacts.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CatFacts = () => {\n  _s();\n  const [fact, setFact] = useState(null); // Состояние для факта о кошке\n  const [error, setError] = useState(null); // Состояние для ошибок\n\n  useEffect(() => {\n    const fetchCatFact = async () => {\n      try {\n        const response = await fetch('https://catfact.ninja/fact');\n        if (!response.ok) {\n          throw new Error('Failed to fetch cat fact');\n        }\n        const data = await response.json();\n        setFact(data.fact); // Сохраняем факт\n      } catch (err) {\n        setError(err.message); // Сохраняем сообщение об ошибке\n      }\n    };\n\n    // Запрашиваем случайный факт о кошке каждый раз, когда компонент монтируется\n    fetchCatFact();\n  }, []); // Пустой массив зависимостей означает, что запрос будет выполнен только один раз при монтировании\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cat-facts\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Random Cat Fact\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }, this) : fact ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: fact\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading cat fact...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n_s(CatFacts, \"xSO3vYiYB4o4XZ/65aZWPVkj420=\");\n_c = CatFacts;\nexport default CatFacts;\nvar _c;\n$RefreshReg$(_c, \"CatFacts\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","CatFacts","_s","fact","setFact","error","setError","fetchCatFact","response","fetch","ok","Error","data","json","err","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/lab4/client/src/components/CatFacts.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst CatFacts = () => {\r\n    const [fact, setFact] = useState(null); // Состояние для факта о кошке\r\n    const [error, setError] = useState(null); // Состояние для ошибок\r\n\r\n    useEffect(() => {\r\n        const fetchCatFact = async () => {\r\n            try {\r\n                const response = await fetch('https://catfact.ninja/fact');\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch cat fact');\r\n                }\r\n\r\n                const data = await response.json();\r\n                setFact(data.fact); // Сохраняем факт\r\n            } catch (err) {\r\n                setError(err.message); // Сохраняем сообщение об ошибке\r\n            }\r\n        };\r\n\r\n        // Запрашиваем случайный факт о кошке каждый раз, когда компонент монтируется\r\n        fetchCatFact();\r\n    }, []); // Пустой массив зависимостей означает, что запрос будет выполнен только один раз при монтировании\r\n\r\n    return (\r\n        <div className=\"cat-facts\">\r\n            <h3>Random Cat Fact</h3>\r\n            {error ? (\r\n                <p className=\"error\">Error: {error}</p>\r\n            ) : fact ? (\r\n                <p>{fact}</p>\r\n            ) : (\r\n                <p>Loading cat fact...</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CatFacts;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxC,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1CD,SAAS,CAAC,MAAM;IACZ,MAAMU,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,CAAC;QAC1D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;QAC/C;QAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCT,OAAO,CAACQ,IAAI,CAACT,IAAI,CAAC,CAAC,CAAC;MACxB,CAAC,CAAC,OAAOW,GAAG,EAAE;QACVR,QAAQ,CAACQ,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC;MAC3B;IACJ,CAAC;;IAED;IACAR,YAAY,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACIP,OAAA;IAAKgB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACtBjB,OAAA;MAAAiB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACvBhB,KAAK,gBACFL,OAAA;MAAGgB,SAAS,EAAC,OAAO;MAAAC,QAAA,GAAC,SAAO,EAACZ,KAAK;IAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,GACvClB,IAAI,gBACJH,OAAA;MAAAiB,QAAA,EAAId;IAAI;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,gBAEbrB,OAAA;MAAAiB,QAAA,EAAG;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC5B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACnB,EAAA,CAnCID,QAAQ;AAAAqB,EAAA,GAARrB,QAAQ;AAqCd,eAAeA,QAAQ;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}